#                            __ _ _
#                           / _(_) |
#       _____ __  _ __ ___ | |_ _| | ___
#      |_  / '_ \| '__/ _ \|  _| | |/ _ \
#     _ / /| |_) | | | (_) | | | | |  __/
#    (_)___| .__/|_|  \___/|_| |_|_|\___|
#          | |
#          |_|
#

# zsh 補完用
autoload -U compinit
compinit

# prompt
autoload -U promptinit
promptinit

autoload -Uz vcs_info
zstyle ':vcs_info:*' formats '[%b]'
zstyle ':vcs_info:*' actionformats '[%b|%a]'
precmd () { vcs_info }
setopt prompt_subst

autoload -Uz colors
colors

PROMPT='%F{magenta}%n%f@%F{cyan}%m%f:%F{green}%~%f
${vcs_info_msg_0_}$ '

# Launch tmux
function is_exists() { type "$1" >/dev/null 2>&1; return $?; }
function is_osx() { [[ $OSTYPE == darwin* ]]; }
function is_screen_running() { [ ! -z "$STY" ]; }
function is_tmux_runnning() { [ ! -z "$TMUX" ]; }
function is_screen_or_tmux_running() { is_screen_running || is_tmux_runnning; }
function shell_has_started_interactively() { [ ! -z "$PS1" ]; }
function is_ssh_running() { [ ! -z "$SSH_CONECTION" ]; }

function tmux_automatically_attach_session()
{
    if is_screen_or_tmux_running; then
        ! is_exists 'tmux' && return 1
        if is_tmux_runnning; then
            echo ""
            echo "${fg_bold[red]}  ███████╗███╗   ███╗██╗   ██╗██╗  ██╗${reset_color}"
            echo "${fg_bold[red]} ╚══██╔══╝████╗ ████║██║   ██║╚██╗██╔╝${reset_color}"
            echo "${fg_bold[red]}    ██║   ██╔████╔██║██║   ██║ ╚███╔╝ ${reset_color}"
            echo "${fg_bold[red]}    ██║   ██║╚██╔╝██║██║   ██║ ██╔██╗ ${reset_color}"
            echo "${fg_bold[red]}    ██║   ██║ ╚═╝ ██║╚██████╔╝██╔╝ ██╗${reset_color}"
            echo "${fg_bold[red]}    ╚═╝   ╚═╝     ╚═╝ ╚═════╝ ╚═╝  ╚═╝${reset_color}"
            echo ""
            echo "  OS Version"
            echo "    `sw_vers | tr "\r\n" " " | awk '{print $2 " " $3 " " $4 " " $6 " (" $8 ")" }'`"
            echo "  Tools Version"
            echo "    Zsh : `zsh --version`"
            echo "    Vim : `vim --version | head -1`"
            echo "    Tmux: `tmux -V`"
        elif is_screen_running; then
            echo "This is on screen."
        fi
    else
        if shell_has_started_interactively && ! is_ssh_running; then
            if ! is_exists 'tmux'; then
                echo 'Error: tmux command not found' 2>&1
                return 1
            fi
            if tmux has-session >/dev/null 2>&1 && tmux list-sessions | grep -qE '.*]$'; then
                # detached session exists
                tmux list-sessions
                echo -n "Tmux: attach? (y/N/num) "
                read
                if [[ "$REPLY" =~ ^[Yy]$ ]] || [[ "$REPLY" == '' ]]; then
                    tmux attach-session
                    if [ $? -eq 0 ]; then
                        echo "$(tmux -V) attached session"
                        return 0
                    fi
                elif [[ "$REPLY" =~ ^[0-9]+$ ]]; then
                    tmux attach -t "$REPLY"
                    if [ $? -eq 0 ]; then
                        echo "$(tmux -V) attached session"
                        return 0
                    fi
                fi
            fi
            if is_osx && is_exists 'reattach-to-user-namespace'; then
                # on OS X force tmux's default command
                # to spawn a shell in the user's namespace
                tmux_config=$(cat $HOME/.tmux.conf <(echo 'set-option -g default-command "reattach-to-user-namespace -l $SHELL"'))
                tmux -f <(echo "$tmux_config") new-session && echo "$(tmux -V) created new session supported OS X"
            else
                tmux new-session && echo "tmux created new session"
            fi
        fi
    fi
}
tmux_automatically_attach_session
