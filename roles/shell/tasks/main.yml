---
- name: Unlink prezto config file
  file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ zsh_prezto_config }}"

- name: Unlink fish function file
  file:
    path: "{{ ansible_env.HOME }}/.config/fish/functions/{{ item }}"
    state: absent
  loop: "{{ fish_function }}"

- block:
  - name: Clone prezto repo
    git:
      repo: "https://github.com/sorin-ionescu/prezto.git"
      dest: "{{ ansible_env.HOME }}/.zprezto"
      recursive: yes
      force: yes

  - name: Set zsh config files
    file:
      src: "{{ item.src }}"
      path: "{{ item.path }}"
      state: link
      force: yes
    loop: "{{ zsh_prezto_config }}"

  - name: Set prezto config files
    template:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      force: yes
    loop: "{{ zsh_config }}"
  when: SHELL == "zsh"

- block:
  - name: Create fish config directory
    file:
      path: "{{ ansible_env.HOME }}/.config/fish/functions"
      state: directory

  - name: Install fisher
    get_url:
      url: "https://git.io/fisher"
      dest: "{{ ansible_env.HOME }}/.config/fish/functions/fisher.fish"

  - name: Install plugins
    shell: >
      fish -c "fisher install {{ item }}"
    loop:
      - oh-my-fish/theme-bobthefish
      - jethrokuan/fzf
      - jethrokuan/z

  - name: Set fish functions
    file:
      src: "{{ ansible_env.HOME }}/dotfiles/roles/shell/files/functions/{{ item }}"
      path: "{{ ansible_env.HOME }}/.config/fish/functions/{{ item }}"
      state: link
      force: yes
    loop: "{{ fish_function }}"

  - name: Set fish config files
    template:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
      force: yes
    loop: "{{ fish_config }}"
  when: SHELL == "fish"

- name: Search shell path
  shell: >
    /usr/bin/which {{ SHELL }}
  register: shell_path
  ignore_errors: True

- name: Check shells file
  shell: >
    /bin/cat /etc/shells | /usr/bin/grep "{{ shell_path.stdout }}"
  register: chk_shell
  ignore_errors: True

- name: Append shells
  lineinfile:
    dest: /etc/shells
    line: "{{ shell_path.stdout }}"
    regexp: "{{ shell_path.stdout }}"
    insertafter: EOF
  when: chk_shell.rc != 0
  become: true

- name: Change login shell
  shell: >
    /usr/bin/chpass -s "{{ shell_path.stdout }}"
  register: result
  until: result.rc == 0
