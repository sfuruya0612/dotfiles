---
- name: Unlink config file
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ ansible_env.HOME }}/.config/nvim/init.vim"
    - "{{ ansible_env.HOME }}/.vimrc"

- block:
  - name: Create .config/nvim directory
    file:
      path: "{{ ansible_env.HOME }}/.config/nvim"
      state: directory

  - name: Install neovim from pip3
    pip:
      name: "{{ item }}"
      executable: pip3
      state: latest
    loop:
      - neovim
      - pynvim

  - name: Install neovim from yarn
    yarn:
      name: "{{ item }}"
      global: yes
      state: latest
    loop:
      - neovim
      - bash-language-server

  - name: Symbolic link coc setting file
    file:
      src: "{{ ansible_env.HOME }}/dotfiles/roles/vim/files/coc-settings.json"
      dest: "{{ ansible_env.HOME }}/.config/nvim/coc-settings.json"
      state: link
      force: yes

  - name: Symbolic link vimrc to neovim init.vim
    file:
      src: "{{ ansible_env.HOME }}/dotfiles/roles/vim/files/vimrc"
      dest: "{{ ansible_env.HOME }}/.config/nvim/init.vim"
      state: link
      force: yes
  when: VIM == "neovim"

- block:
  - name: Symbolic link coc setting file
    file:
      src: "{{ ansible_env.HOME }}/dotfiles/roles/vim/files/coc-settings.json"
      dest: "{{ ansible_env.HOME }}/.vim/coc-settings.json"
      state: link
      force: yes

  - name: Symbolic link vimrc
    file:
      src: "{{ ansible_env.HOME }}/dotfiles/roles/vim/files/vimrc"
      dest: "{{ ansible_env.HOME }}/.vimrc"
      state: link
      force: yes
  when: VIM == "vim"

- name: Create dein toml directory
  file:
    path: "{{ ansible_env.HOME }}/.config/vim"
    state: directory

- name: Set dein toml file
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    force: yes
  loop:
    - src: "dein.toml.j2"
      dest: "{{ ansible_env.HOME }}/.config/vim/dein.toml"
    - src: "dein_lazy.toml.j2"
      dest: "{{ ansible_env.HOME }}/.config/vim/dein_lazy.toml"
