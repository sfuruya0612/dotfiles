# require
[[plugins]]
repo = 'Shougo/dein.vim'

# require
[[plugins]]
repo = 'Shougo/deoplete.nvim'

# require (not neovim)
# [[plugins]]
# repo = 'roxma/vim-hug-neovim-rpc'

# require (not neovim)
# [[plugins]]
# repo = 'roxma/nvim-yarp'

# Colorscheme
[[plugins]]
repo = 'haishanh/night-owl.vim'
hook_add = '''
    augroup TransparentBG
    	autocmd!
    	autocmd Colorscheme * highlight Normal ctermbg=none
    	autocmd Colorscheme * highlight NonText ctermbg=none
    	autocmd Colorscheme * highlight LineNr ctermbg=none
    	autocmd Colorscheme * highlight Folded ctermbg=none
        autocmd Colorscheme * highlight EndOfBuffer ctermbg=none
    augroup END

    set winblend=30
    set pumblend=15

    augroup transparent-windows
        autocmd!
        autocmd FileType denite set winblend=10
        autocmd FileType denite-filter set winblend=10
    augroup END
'''

# vim 非同期処理用
[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

# save vim session
[[plugins]]
repo = 'tpope/vim-obsession'

# ( ) coloring
[[plugins]]
repo = 'luochen1990/rainbow'
hook_add = '''
    let g:rainbow_active = 1
'''

# Statusline design
[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    function! AbsolutePath()
        let path = expand("%F")
        if path == ""
            return '[No Name]'
        elseif strlen(path) > 32
            return pathshorten(path)
        else
            return path
        endif
    endfunction

    let g:lightline = {
    \    'colorscheme': 'nightowl',
    \    'active': {
    \        'left': [
    \            [ 'mode', 'paste' ],
    \            [ 'readonly', 'filename', 'modified' ]
    \        ],
    \        'right': [
    \            [ 'lineinfo' ],
    \            [ 'percent' ],
    \            [ 'fileformat', 'fileencoding', 'filetype' ]
    \        ]
    \    },
    \    'component_function': {
    \        'filename': 'AbsolutePath'
    \    },
    \    'separator': {
    \        'left': "\ue0b0",
    \        'right': "\ue0b2"
    \    },
    \    'subseparator': {
    \        'left': "\ue0b1",
    \        'right': "\ue0b3"
    \    }
    \ }

    function! LightlineTabFilename(n) abort
        let buflist = tabpagebuflist(a:n)
        let winnr = tabpagewinnr(a:n)
        let _ = pathshorten(expand('#'.buflist[winnr - 1].':f'))
        return _ !=# '' ? _ : '[No Name]'
    endfunction

    let g:lightline.tab = {
    \    'active': [ 'tabnum', 'filename', 'modified' ],
    \    'inactive': [ 'tabnum', 'filename', 'modified' ]
    \ }

    let g:lightline.tab_component_function = {
    \    'tabnum': 'lightline#tab#tabnum',
    \    'filename': 'LightlineTabFilename',
    \    'modified': 'lightline#tab#modified'
    \ }

    let g:lightline.tabline = {
    \    'left': [ [ 'tabs' ] ],
    \    'right': [ [ 'close' ] ]
    \ }
'''

# linter
[[plugins]]
repo = 'dense-analysis/ale'
hook_add = '''
    let g:ale_set_highlights = 0
    let g:ale_lint_on_enter = 1
    let g:ale_lint_on_save = 1
    let g:ale_lint_on_text_changed = 0
    let g:ale_sign_column_always = 1
    let g:ale_linters = {
        \ 'ansible': ['ansible-lint'],
        \ 'cloudformation': ['cfn-python-lint'],
        \ 'dockerfile': ['hadolint'],
        \ 'elixir': ['credo'],
        \ 'erlang': ['erlc'],
        \ 'go': ['golint'],
        \ 'javascript': ['eslint'],
        \ 'json': ['jq'],
        \ 'markdown': ['textlint'],
        \ 'python': ['flake8'],
        \ 'typescript': ['eslint'],
        \ 'vim': ['vint'],
        \ }
    let g:ale_sign_error = 'E'
    let g:ale_sign_warning = 'W'
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %s (%severity%)'
    let g:ale_open_list = 0
    let g:ale_keep_list_window_open = 0
    let g:ale_javascript_prettier_use_local_config = 1
    let g:ale_set_quickfix = 1
    let g:ale_set_loclist = 0
'''

# fzf
[[plugins]]
repo = 'junegunn/fzf'
build = './install --all'
merged = 0

# fzf.vim
[[plugins]]
repo = 'junegunn/fzf.vim'
depends = ['fzf']
hook_add = '''
    command! -bang -nargs=* Rg
        \ call fzf#vim#grep
        \ 'rg --line-number --no-heading '.shellescape(<q-args>), 0,
        \ fzf#vim#with_preview({'options': '--exact --reverse'}, 'right:50%:wrap'))

    let g:fzf_action = {
    \   'ctrl-s': 'split',
    \   'ctrl-v': 'vsplit',
    \ }
'''

# if, funcのendを補完
[[plugins]]
repo = 'tpope/vim-endwise'

# 左端にgit diff iconを表示
[[plugins]]
repo = 'airblade/vim-gitgutter'

# Gblame, GstatusなどのGit操作
[[plugins]]
repo = 'tpope/vim-fugitive'
hook_add = '''
    nnoremap [fugitive] <Nop>
    nmap <space>g [fugitive]
    nnoremap <silent> [fugitive]s :Gstatus<CR><C-w>T
    nnoremap <silent> [fugitive]a :Gwrite<CR>
    nnoremap <silent> [fugitive]c :Gcommit-v<CR>
    nnoremap <silent> [fugitive]b :Gblame<CR>
    nnoremap <silent> [fugitive]p :Gpull<CR>
    nnoremap <silent> [fugitive]d :Gdiff<CR>
    nnoremap <silent> [fugitive]m :Gmerge<CR>
'''

# vim window resize
# usage: <C-x> start, h, j, k, l resize
[[plugins]]
repo = 'simeji/winresizer'
hook_add = '''
    let g:winresizer_start_key = '<C-x>'
'''

# vim indent
[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
    let g:indent_guides_enable_on_vim_startup = 1
    let g:indent_guides_exclude_filetypes = ['help', 'nerdtree']
    let g:indent_guides_auto_colors = 0
    autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=black
    autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=17
'''

# Comment in/out
# Usage: Visual mode + gc
[[plugins]]
repo = 'tpope/vim-commentary'

# translate to popup window
# Not supported neovim
# [[plugins]]
# repo = 'skanehira/translate.vim'
# hook_add = '''
#     let g:translate_source = "en"
#     let g:translate_target = "ja"
#     let g:translate_winsize = 10
# '''

# Use docker
# Not supported neovim
# [[plugins]]
# repo = 'skanehira/docker.vim'
