"           _
"    __   _(_)_ __ ___  _ __ ___
"    \ \ / / | '_ ` _ \| '__/ __|
"     \ V /| | | | | | | | | (__
"    (_)_/ |_|_| |_| |_|_|  \___|
"

" Encoding settings -------------------
set encoding=utf-8
scriptencoding utf-8

if has('nvim')
    let g:loaded_python_provider = 0
    let g:python3_host_prog = '/opt/homebrew/bin/python3'
    let g:node_host_prog = '/opt/homebrew/bin/node'
endif

" Start Dein Settings
let s:dein_dir = $HOME . '/.vim/cache'

if has('nvim')
    let s:dein_dir = $HOME . '/.config/nvim/cache'
endif

let s:dein_repo_dir = s:dein_dir . '/repos/github.com/Shougo/dein.vim'

if &runtimepath !~# '/dein.vim'
    if !isdirectory(s:dein_repo_dir)
        execute '!git clone https://github.com/Shougo/dein.vim' s:dein_repo_dir
    endif

    execute 'set runtimepath^=' . fnamemodify(s:dein_repo_dir, ':p')
endif

if dein#load_state(s:dein_dir)
    call dein#begin(s:dein_dir)

    let g:dein_plugin_dir = expand($HOME . '/.config/vim')

    " call dein#add('EdenEast/nightfox.nvim')
    call dein#load_toml(g:dein_plugin_dir . '/dein.toml', {'lazy': 0})
    call dein#load_toml(g:dein_plugin_dir . '/dein_lazy.toml', {'lazy': 1})

    call dein#end()
    call dein#save_state()
endif

filetype plugin indent on
syntax enable

if dein#check_install()
    call dein#install()
endif
" End Dein Settings

"Setting the Color Scheme
set termguicolors
colorscheme nightfox
set background=dark
" let g:lightline = {'colorscheme': 'nightfox'}

" General Settings
set fenc=utf-8
set fileencoding=utf-8
set fileformats=unix,dos,mac
set nobackup
set noswapfile
set autoread
set hidden
set showcmd
set updatetime=250
set number
set ttyfast
set backspace=indent,eol,start

set whichwrap=b,s,h,l,<,>,[,],~

nnoremap j gj
nnoremap k gk
nnoremap <C-a> ^
nnoremap <C-e> $

set clipboard+=unnamed

nnoremap <C-n> :CocCommand explorer --root-strategies keep<CR>

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

noremap <leader>u :w<Home>silent <End> !urlview<CR>

imap <S-CR> <End><CR>
imap <C-S-CR> <Up><End><CR>
nnoremap <S-CR> mzo<ESC>`z
nnoremap <C-S-CR> mzO<ESC>`z

" Setting the Status & Tab Line
set laststatus=2
set noshowmode
set showtabline=2

" Indent Setting
set expandtab
set tabstop=4
set softtabstop=2
set autoindent
set smartindent
set shiftwidth=4

" yml, any javascript file indent
autocmd BufRead,BufNewFile *.yml,*.yaml,*.vue,*.ts,*.js,*tsx setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd BufNewFile,BufRead *.tsx let b:tsx_ext_found = 1
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx

" Highlight & Search Settings
set showmatch
set cursorline
" Highlight on Search Toggle
set hlsearch
    nnoremap <silent><Esc><Esc> :<C-u>set nohlsearch!<CR>
augroup HighlightTrailingSpaces
    autocmd!
    autocmd VimEnter,WinEnter,ColorScheme * highlight TrailingSpaces term=underline guibg=Red ctermbg=Red
    autocmd VimEnter,WinEnter * match TrailingSpaces /\s\+$/
augroup END
set incsearch
set ignorecase
set smartcase

" vimdiff Color
autocmd VimEnter,WinEnter,ColorScheme * highlight DiffAdd    cterm=bold ctermfg=DarkMagenta ctermbg=0x002b36 gui=none guifg=bg guibg=Red
autocmd VimEnter,WinEnter,ColorScheme * highlight DiffDelete cterm=bold ctermfg=Red         ctermbg=0x002b36 gui=none guifg=bg guibg=Red
autocmd VimEnter,WinEnter,ColorScheme * highlight DiffChange cterm=bold ctermfg=DarkMagenta ctermbg=0x002b36 gui=none guifg=bg guibg=Red
autocmd VimEnter,WinEnter,ColorScheme * highlight DiffText   cterm=bold ctermfg=black       ctermbg=Red      gui=none guifg=bg guibg=Red

filetype plugin indent on
